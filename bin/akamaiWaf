#!/usr/bin/env node

// Copyright 2017 Karl Redgate, All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

const Tool = require('tool');
const Noi = require('noi');
const { AppSecConfiguration, AppSecDefinition, AppSecResource } = Noi;

const sep = "\t";

function repeat(pattern, count) {
    if ( count < 1 ) return '';
    var result = '';
    while (count > 1) {
        if (count & 1) result += pattern;
        count >>= 1;
        pattern += pattern;
    }
    return result + pattern;
}

function left_fill( s, size ) {
    var count = size - s.length;
    return s + repeat(' ', count);
}

function right_fill( s, size ) {
    var count = size - s.length;
    return repeat(' ', count) + s;
}

function error_details( dto ) {
    console.error( dto.title + " -- " + dto.detail );
}

function detailed_info( obj ) {
    // console.log( JSON.stringify(obj) );
    obj.list.map( (e) => console.log(e) );
}

function info( obj ) {
    var name = obj.name;
    var type = left_fill( obj.type, 4 );
    var id   = left_fill( obj["unique-id"], 30 );
    var account = obj.account;
    var entries = obj.numEntries;
    var entry_s = right_fill( "("+entries+" entries)", 16 );
    console.log( id + type + entry_s + "  " + name );
    console.log( repeat(' ',52) + account );
}

function spaceship( a, b ) {
    return (a > b) - (a < b);
}

/*
 */
function per_config( dto ) {
    if ( typeof dto.network_lists == 'undefined' ) {
        error_details( dto );
        console.log( "8259" );
        return;
    }
    var list = dto.network_lists.sort( (a,b) => spaceship(a.account, b.account) );
    if ( list.length === 0 ) {
        console.error( "no configs" );
    }
    list.map( info );
}

function print_activation_status( dto ) {
    console.log(  );
}

function delete_response() {
}

function die_unless_valid_env( env ) {
    if ( Noi.is_invalid_env(env) ) {
        console.error( "Invalid environment" );
        process.exit( 1 );
    }
}

var commands = {
    // List should be just the list of names unless --verbose is used
    "configs": function () {
        AppSecConfiguration.configs( per_config );
    },
    "config": function (id) {
        AppSecConfiguration.config( id, detailed_info );
    },
    "versions": function () {
        AppSecConfiguration.versions( per_config );
    },
    "config": function (id) {
        AppSecConfiguration.configVersion( id, detailed_info );
    },
    "clone": function (configId, versionId) {
        AppSecConfiguration.cloneConfigVersion( configId, versionId, Noi.dump_dto );
    },
    "activate": function (name, env) {
        env = env || 'staging';
        die_unless_valid_env( env );
        var params = {
            name: name,
            env: env
        };
        AppSecConfiguration.activate( params, Noi.dump_dto );
    },
    "activation": function (name, env) {
        if ( Noi.is_valid_env(env) ) {
            AppSecConfiguration.activation_status( name, env, Noi.dump_dto );
            process.exit( 0 );
        }
        // if env not specified - do both
        AppSecConfiguration.activation_status( name, 'staging', 
            (dto) => console.log("Staging:    " + dto["activation-status"])
        );
        AppSecConfiguration.activation_status( name, 'production', 
            (dto) => console.log("Production: " + dto["activation-status"])
        );
    },
    "selectable-hostnames": function () {
        AppSecDefinition.add_hostname( id, element, delete_response );
    },
    "selected-hostnames": function (hostnames) {
        // if hostnames is null - get, otherwise set
        if ( hostnames == null ) {
            // get
            return;
        }
        if ( hostnames.constructor !== Array ) {
            // construct an array from the remaining args...
        }
        AppSecDefinition.add_hostname( id, element, delete_response );
    },
    "add-hostname": function (id, element) {
        AppSecDefinition.add_hostname( id, element, delete_response );
    },
    "create-match-target": function (id, element) {
        AppSecDefinition.create_match_target( id, element, delete_response );
    },
    "modify-match-target": function (id, element) {
        WAF.modify_match_target( id, element, delete_response );
    }
};

var tool = new Tool( commands );

tool.evaluate( process.argv );

/* vim: set autoindent expandtab sw=4 syntax=javascript: */
