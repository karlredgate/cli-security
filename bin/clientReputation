#!/usr/bin/env node

// Copyright 2017 Akamai Technologies, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

"use strict";

function die( message ) {
    console.log( message );
    process.exit( 1 );
}

const node_exec = process.argv.shift();
const script    = process.argv.shift();

var settings = {
    verbose: false
};

var options = {};

options["-v"] = options["--verbose"] = function () {
    this.verbose = true;
}

options["--config"] = function (id) {
    if ( id === undefined ) die("--config requires an argument");
    this.config = id;
}

options["--version"] = function (id) {
    if ( id === undefined ) die("--version requires an argument");
    this.version = id;
}

function get_options( arg ) {
    if ( ! arg.match(/^-.*/) ) return true;

    var [key,value] = arg.split("=");
    var handler = options[ key ];
    if ( typeof handler === 'undefined' ) {
        console.log( "unknown option: " + arg );
        process.exit( -1 );
    }

    handler.call( settings, value );
    return false;
}

var commands = {};

commands["configs"] = function () {
    console.log( "list waf configurations" );
};

commands["activate"] = function ( args ) {
    if ( this.config === undefined ) {
        die("no config specified for activation");
    }
    if ( this.verbose ) {
        console.log( "activating waf configuration: " + this.config);
    }
};

commands["match-target"] = function () {
    console.log( "adding waf match-target" );
};

commands["help"] = function () {
    for ( var command in commands ) {
        if ( command === "help" ) continue;
        console.log( command );
    }
};

process.argv = process.argv.filter( get_options );

var command_name = process.argv.shift();
var command      = commands[ command_name ];

if ( typeof command === 'undefined' ) {
    die( "Unknown command: " + command_name );
    command = commands.help;
}

command.apply( settings, process.argv );

// vim:autoindent expandtab sw=4
